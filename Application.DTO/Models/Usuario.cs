//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Application.DTO.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Usuario
    {
        public Usuario()
        {
            this.AsocUsuarioPerfil = new HashSet<AsocUsuarioPerfil>();
            this.Causa = new HashSet<Causa>();
            this.Derivacion = new HashSet<Derivacion>();
            this.Expediente = new HashSet<Expediente>();
            this.Firma = new HashSet<Firma>();
        }
    
        public int UsuarioID { get; set; }
        public string AdID { get; set; }

        public Nullable<int> Rut { get; set; }
        public string Nombres { get; set; }
        public string Apellidos { get; set; }
        public string Mail { get; set; }
        public string Telefono { get; set; }
        public bool IsClaveUnica { get; set; }
        public System.DateTime FechaRegistro { get; set; }
        public System.DateTime FechaModificacion { get; set; }
        public int TipoGeneroID { get; set; }
        public string Signer { get; set; }
        public string SignerEncrypted { get; set; }


        public virtual ICollection<AsocDocumentoUsuario> AsocDocumentoUsuario { get; set; }
        public virtual ICollection<AsocUsuarioPerfil> AsocUsuarioPerfil { get; set; }
        public virtual ICollection<Causa> Causa { get; set; }
        public virtual ICollection<Derivacion> Derivacion { get; set; }
        public virtual ICollection<Expediente> Expediente { get; set; }
        public virtual ICollection<Firma> Firma { get; set; }
        public virtual TipoGenero TipoGenero { get; set; }

        public string GetTextoRelator()
        {
            Domain.Infrastructure.TipoGenero tipo = (Domain.Infrastructure.TipoGenero)TipoGeneroID;

            string txt = "Relator(a) Sr(a)";

            switch (tipo)
            {
                case Domain.Infrastructure.TipoGenero.Masculino:
                    txt = "Relator Sr.";
                    break;
                case Domain.Infrastructure.TipoGenero.Femenino:
                    txt = "Relatora Sra.";
                    break;
                default:
                    break;
            }

            return txt;
        }

        public string GetTextoByGenero(string txt)
        {
            Domain.Infrastructure.TipoGenero tipo = (Domain.Infrastructure.TipoGenero)TipoGeneroID;

            switch (tipo)
            {
                case Domain.Infrastructure.TipoGenero.Masculino:
                    txt = $"{txt}o";
                    break;
                case Domain.Infrastructure.TipoGenero.Femenino:
                    txt = $"{txt}a";
                    break;
                case Domain.Infrastructure.TipoGenero.Otro:
                    txt = $"{txt}o(a)";
                    break;
                default:
                    break;
            }

            return txt;
        }

        public string GetFullName(bool upper = false)
        {
            string FullName = "";
            try
            {
                string[] names = new[] { Nombres.Trim(), Apellidos.Trim() };

                FullName = string.Join(" ", names);
            }
            catch (Exception)
            {
                FullName = "";
            }

            return upper ? FullName.ToUpper() : FullName.Trim();

        }

        public string GetPerfiles()
        {
            List<string> perfil = new List<string>();

            foreach (var item in this.AsocUsuarioPerfil)
            {
                perfil.Add(item.Perfil.Descripcion);
            };

            return string.Join(" &#183; ", perfil);
        }


        public bool IsTDPI()
        {
            return AsocUsuarioPerfil.Any(x => x.PerfilID == (int)Domain.Infrastructure.Perfil.TDPI);
        }

        public bool IsExterno()
        {
            return AsocUsuarioPerfil.Any(x => 
            x.PerfilID == (int)Domain.Infrastructure.Perfil.INAPI || 
            x.PerfilID == (int)Domain.Infrastructure.Perfil.INAPI);
        }

        public bool IsAbogado()
        {
            return AsocUsuarioPerfil.Any(x => x.PerfilID == (int)Domain.Infrastructure.Perfil.Abogado);
        }

        public string GetRUT()
        {
            int rut = Convert.ToInt32(this.Rut);
            if (rut > 0)
            {
                Infrastructure.Utils.Mod11Validator mod11 = new Infrastructure.Utils.Mod11Validator(rut, "");
                return rut.ToString().Trim() + "-" + mod11.CalcularDigitoVerificador(rut);
            }
            else
            {
                return "";
            }
        }

        public string GetPerfilesParaEvento()
        {
            List<string> perfil = new List<string>();

            foreach (var item in this.AsocUsuarioPerfil)
            {
                if (item.PerfilID != (int)Domain.Infrastructure.Perfil.Administrador)
                {
                    perfil.Add(item.Perfil.Descripcion);
                }
                
            };

            return string.Join(" &#183; ", perfil);
        }

    }
}
